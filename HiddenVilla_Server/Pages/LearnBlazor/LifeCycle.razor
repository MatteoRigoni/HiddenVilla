@page "/lifecycle";
@using System.Threading;

<h1>LifeCycle</h1>

<div class="border">
    <HiddenVilla_Server.Pages.LearnBlazor.Components.LifeCycleComponent TestValue="@testValue" />
</div>

<br />
Timer value: @count <button @onclick="StartCountDown">Avvia timer</button>
                    <br />

<p>Current test value: @testValue</p>
<button class="btn btn-outline-primary" @onclick="IncrementCount">Click me</button>
<br />

@foreach (var item in EventType)
{
    @item
    <br />
}

@code {
    private int testValue = 0;
    List<string> EventType = new List<string>();

    private int count { get; set; } = 5;

    private void IncrementCount()
    {
        testValue++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
        await Task.Delay(10);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");
        await Task.Delay(10);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add("OnAfterRender is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    void StartCountDown()
    {
        var timer = new Timer(TimerCallback, null, 1000, 1000);
    }

    void TimerCallback(object state)
    {
        if (count > 0)
        {
            count--;
            InvokeAsync(StateHasChanged);
        }
    }
}